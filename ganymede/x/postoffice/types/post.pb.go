// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ganymede/postoffice/post.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Post struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Payload      string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	FromChain    string `protobuf:"bytes,4,opt,name=fromChain,proto3" json:"fromChain,omitempty"`
	Sender       string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver     string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	SenderInfo   string `protobuf:"bytes,7,opt,name=senderInfo,proto3" json:"senderInfo,omitempty"`
	SentDate     string `protobuf:"bytes,8,opt,name=sentDate,proto3" json:"sentDate,omitempty"`
	LinkSender   string `protobuf:"bytes,9,opt,name=linkSender,proto3" json:"linkSender,omitempty"`
	LinkReceiver string `protobuf:"bytes,10,opt,name=linkReceiver,proto3" json:"linkReceiver,omitempty"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2458b5557fdae6, []int{0}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Post) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *Post) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Post) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Post) GetSenderInfo() string {
	if m != nil {
		return m.SenderInfo
	}
	return ""
}

func (m *Post) GetSentDate() string {
	if m != nil {
		return m.SentDate
	}
	return ""
}

func (m *Post) GetLinkSender() string {
	if m != nil {
		return m.LinkSender
	}
	return ""
}

func (m *Post) GetLinkReceiver() string {
	if m != nil {
		return m.LinkReceiver
	}
	return ""
}

func init() {
	proto.RegisterType((*Post)(nil), "ganymede.postoffice.Post")
}

func init() { proto.RegisterFile("ganymede/postoffice/post.proto", fileDescriptor_9a2458b5557fdae6) }

var fileDescriptor_9a2458b5557fdae6 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0x9b, 0x7c, 0xfd, 0x3d, 0xfa, 0xc4, 0x60, 0x10, 0xb2, 0x10, 0xb2, 0xaa, 0x4e, 0x5d,
	0x48, 0x06, 0xae, 0x80, 0x9f, 0x85, 0x0d, 0x95, 0x0d, 0x26, 0x37, 0x39, 0x29, 0x16, 0x89, 0x4f,
	0x14, 0x1f, 0x10, 0xe1, 0x2a, 0x18, 0xb9, 0x24, 0xc6, 0x8e, 0x8c, 0xa8, 0xbd, 0x11, 0x54, 0x87,
	0xb4, 0x65, 0xf3, 0xf3, 0x3e, 0x7e, 0x75, 0x86, 0x17, 0xd4, 0x42, 0xdb, 0xba, 0xc0, 0x14, 0xe3,
	0x92, 0x1c, 0x53, 0x96, 0x99, 0xa4, 0x79, 0x46, 0x65, 0x45, 0x4c, 0xe2, 0xb0, 0xf5, 0xd1, 0xce,
	0x4f, 0x3e, 0x42, 0xe8, 0xde, 0x92, 0x63, 0x71, 0x00, 0xa1, 0x49, 0x65, 0x30, 0x0e, 0xa6, 0xdd,
	0x59, 0x68, 0x52, 0x71, 0x04, 0x3d, 0x36, 0x9c, 0xa3, 0x0c, 0xc7, 0xc1, 0x74, 0x34, 0x6b, 0x40,
	0x48, 0x18, 0x94, 0xba, 0xce, 0x49, 0xa7, 0xf2, 0x9f, 0xcf, 0x5b, 0x14, 0xa7, 0x30, 0xca, 0x2a,
	0x2a, 0xae, 0x1e, 0xb5, 0xb1, 0xb2, 0xeb, 0xdd, 0x2e, 0x10, 0xc7, 0xd0, 0x77, 0x68, 0x53, 0xac,
	0x64, 0xcf, 0xab, 0x5f, 0x12, 0x27, 0x30, 0xac, 0x30, 0x41, 0xf3, 0x82, 0x95, 0xec, 0x7b, 0xb3,
	0x65, 0xa1, 0x00, 0x9a, 0x5f, 0x37, 0x36, 0x23, 0x39, 0xf0, 0x76, 0x2f, 0xd9, 0x74, 0x1d, 0x5a,
	0xbe, 0xd6, 0x8c, 0x72, 0xd8, 0x74, 0x5b, 0xde, 0x74, 0x73, 0x63, 0x9f, 0xee, 0x9a, 0x9b, 0xa3,
	0xa6, 0xbb, 0x4b, 0xc4, 0x04, 0xfe, 0x6f, 0x68, 0xd6, 0xde, 0x06, 0xff, 0xe3, 0x4f, 0x76, 0xf9,
	0xf0, 0xb9, 0x52, 0xc1, 0x72, 0xa5, 0x82, 0xef, 0x95, 0x0a, 0xde, 0xd7, 0xaa, 0xb3, 0x5c, 0xab,
	0xce, 0xd7, 0x5a, 0x75, 0xee, 0x2f, 0x16, 0x86, 0x73, 0x3d, 0x8f, 0xea, 0xfc, 0xad, 0xd4, 0x75,
	0x94, 0x50, 0x11, 0x2f, 0x9e, 0xb5, 0x65, 0x4d, 0x71, 0x42, 0xae, 0x20, 0x77, 0xc6, 0xe8, 0x38,
	0xde, 0xee, 0xf1, 0xba, 0xbf, 0x08, 0xd7, 0x25, 0xba, 0x79, 0xdf, 0x6f, 0x72, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xab, 0x55, 0x52, 0xb5, 0xb5, 0x01, 0x00, 0x00,
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LinkReceiver) > 0 {
		i -= len(m.LinkReceiver)
		copy(dAtA[i:], m.LinkReceiver)
		i = encodeVarintPost(dAtA, i, uint64(len(m.LinkReceiver)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LinkSender) > 0 {
		i -= len(m.LinkSender)
		copy(dAtA[i:], m.LinkSender)
		i = encodeVarintPost(dAtA, i, uint64(len(m.LinkSender)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SentDate) > 0 {
		i -= len(m.SentDate)
		copy(dAtA[i:], m.SentDate)
		i = encodeVarintPost(dAtA, i, uint64(len(m.SentDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SenderInfo) > 0 {
		i -= len(m.SenderInfo)
		copy(dAtA[i:], m.SenderInfo)
		i = encodeVarintPost(dAtA, i, uint64(len(m.SenderInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintPost(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPost(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPost(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPost(dAtA []byte, offset int, v uint64) int {
	offset -= sovPost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPost(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.SenderInfo)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.SentDate)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.LinkSender)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	l = len(m.LinkReceiver)
	if l > 0 {
		n += 1 + l + sovPost(uint64(l))
	}
	return n
}

func sovPost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPost(x uint64) (n int) {
	return sovPost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPost = fmt.Errorf("proto: unexpected end of group")
)
