// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ganymede/exchange/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAskRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAskRequest) Reset()         { *m = QueryGetAskRequest{} }
func (m *QueryGetAskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAskRequest) ProtoMessage()    {}
func (*QueryGetAskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{2}
}
func (m *QueryGetAskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAskRequest.Merge(m, src)
}
func (m *QueryGetAskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAskRequest proto.InternalMessageInfo

func (m *QueryGetAskRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAskResponse struct {
	Ask Ask `protobuf:"bytes,1,opt,name=Ask,proto3" json:"Ask"`
}

func (m *QueryGetAskResponse) Reset()         { *m = QueryGetAskResponse{} }
func (m *QueryGetAskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAskResponse) ProtoMessage()    {}
func (*QueryGetAskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{3}
}
func (m *QueryGetAskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAskResponse.Merge(m, src)
}
func (m *QueryGetAskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAskResponse proto.InternalMessageInfo

func (m *QueryGetAskResponse) GetAsk() Ask {
	if m != nil {
		return m.Ask
	}
	return Ask{}
}

type QueryAllAskRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAskRequest) Reset()         { *m = QueryAllAskRequest{} }
func (m *QueryAllAskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAskRequest) ProtoMessage()    {}
func (*QueryAllAskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{4}
}
func (m *QueryAllAskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAskRequest.Merge(m, src)
}
func (m *QueryAllAskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAskRequest proto.InternalMessageInfo

func (m *QueryAllAskRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAskResponse struct {
	Ask        []Ask               `protobuf:"bytes,1,rep,name=Ask,proto3" json:"Ask"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAskResponse) Reset()         { *m = QueryAllAskResponse{} }
func (m *QueryAllAskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAskResponse) ProtoMessage()    {}
func (*QueryAllAskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{5}
}
func (m *QueryAllAskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAskResponse.Merge(m, src)
}
func (m *QueryAllAskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAskResponse proto.InternalMessageInfo

func (m *QueryAllAskResponse) GetAsk() []Ask {
	if m != nil {
		return m.Ask
	}
	return nil
}

func (m *QueryAllAskResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReplyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetReplyRequest) Reset()         { *m = QueryGetReplyRequest{} }
func (m *QueryGetReplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReplyRequest) ProtoMessage()    {}
func (*QueryGetReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{6}
}
func (m *QueryGetReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReplyRequest.Merge(m, src)
}
func (m *QueryGetReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReplyRequest proto.InternalMessageInfo

func (m *QueryGetReplyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetReplyResponse struct {
	Reply Reply `protobuf:"bytes,1,opt,name=Reply,proto3" json:"Reply"`
}

func (m *QueryGetReplyResponse) Reset()         { *m = QueryGetReplyResponse{} }
func (m *QueryGetReplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReplyResponse) ProtoMessage()    {}
func (*QueryGetReplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{7}
}
func (m *QueryGetReplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReplyResponse.Merge(m, src)
}
func (m *QueryGetReplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReplyResponse proto.InternalMessageInfo

func (m *QueryGetReplyResponse) GetReply() Reply {
	if m != nil {
		return m.Reply
	}
	return Reply{}
}

type QueryAllReplyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReplyRequest) Reset()         { *m = QueryAllReplyRequest{} }
func (m *QueryAllReplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReplyRequest) ProtoMessage()    {}
func (*QueryAllReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{8}
}
func (m *QueryAllReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReplyRequest.Merge(m, src)
}
func (m *QueryAllReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReplyRequest proto.InternalMessageInfo

func (m *QueryAllReplyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReplyResponse struct {
	Reply      []Reply             `protobuf:"bytes,1,rep,name=Reply,proto3" json:"Reply"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReplyResponse) Reset()         { *m = QueryAllReplyResponse{} }
func (m *QueryAllReplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReplyResponse) ProtoMessage()    {}
func (*QueryAllReplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{9}
}
func (m *QueryAllReplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReplyResponse.Merge(m, src)
}
func (m *QueryAllReplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReplyResponse proto.InternalMessageInfo

func (m *QueryAllReplyResponse) GetReply() []Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *QueryAllReplyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListAskBySenderRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Page   uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit  uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListAskBySenderRequest) Reset()         { *m = QueryListAskBySenderRequest{} }
func (m *QueryListAskBySenderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAskBySenderRequest) ProtoMessage()    {}
func (*QueryListAskBySenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{10}
}
func (m *QueryListAskBySenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAskBySenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAskBySenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAskBySenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAskBySenderRequest.Merge(m, src)
}
func (m *QueryListAskBySenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAskBySenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAskBySenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAskBySenderRequest proto.InternalMessageInfo

func (m *QueryListAskBySenderRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryListAskBySenderRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryListAskBySenderRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListAskBySenderResponse struct {
	Ask []*Ask `protobuf:"bytes,1,rep,name=ask,proto3" json:"ask,omitempty"`
}

func (m *QueryListAskBySenderResponse) Reset()         { *m = QueryListAskBySenderResponse{} }
func (m *QueryListAskBySenderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAskBySenderResponse) ProtoMessage()    {}
func (*QueryListAskBySenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{11}
}
func (m *QueryListAskBySenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAskBySenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAskBySenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAskBySenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAskBySenderResponse.Merge(m, src)
}
func (m *QueryListAskBySenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAskBySenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAskBySenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAskBySenderResponse proto.InternalMessageInfo

func (m *QueryListAskBySenderResponse) GetAsk() []*Ask {
	if m != nil {
		return m.Ask
	}
	return nil
}

type QueryListAskByReplierRequest struct {
	Replier string `protobuf:"bytes,1,opt,name=replier,proto3" json:"replier,omitempty"`
	Page    uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListAskByReplierRequest) Reset()         { *m = QueryListAskByReplierRequest{} }
func (m *QueryListAskByReplierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAskByReplierRequest) ProtoMessage()    {}
func (*QueryListAskByReplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{12}
}
func (m *QueryListAskByReplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAskByReplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAskByReplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAskByReplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAskByReplierRequest.Merge(m, src)
}
func (m *QueryListAskByReplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAskByReplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAskByReplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAskByReplierRequest proto.InternalMessageInfo

func (m *QueryListAskByReplierRequest) GetReplier() string {
	if m != nil {
		return m.Replier
	}
	return ""
}

func (m *QueryListAskByReplierRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryListAskByReplierRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListAskByReplierResponse struct {
	Ask []*Ask `protobuf:"bytes,1,rep,name=ask,proto3" json:"ask,omitempty"`
}

func (m *QueryListAskByReplierResponse) Reset()         { *m = QueryListAskByReplierResponse{} }
func (m *QueryListAskByReplierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAskByReplierResponse) ProtoMessage()    {}
func (*QueryListAskByReplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{13}
}
func (m *QueryListAskByReplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAskByReplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAskByReplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAskByReplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAskByReplierResponse.Merge(m, src)
}
func (m *QueryListAskByReplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAskByReplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAskByReplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAskByReplierResponse proto.InternalMessageInfo

func (m *QueryListAskByReplierResponse) GetAsk() []*Ask {
	if m != nil {
		return m.Ask
	}
	return nil
}

type QueryListReplyBySenderRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Page   uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit  uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListReplyBySenderRequest) Reset()         { *m = QueryListReplyBySenderRequest{} }
func (m *QueryListReplyBySenderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListReplyBySenderRequest) ProtoMessage()    {}
func (*QueryListReplyBySenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{14}
}
func (m *QueryListReplyBySenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListReplyBySenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListReplyBySenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListReplyBySenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListReplyBySenderRequest.Merge(m, src)
}
func (m *QueryListReplyBySenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListReplyBySenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListReplyBySenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListReplyBySenderRequest proto.InternalMessageInfo

func (m *QueryListReplyBySenderRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryListReplyBySenderRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryListReplyBySenderRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListReplyBySenderResponse struct {
	Reply []*Reply `protobuf:"bytes,1,rep,name=reply,proto3" json:"reply,omitempty"`
}

func (m *QueryListReplyBySenderResponse) Reset()         { *m = QueryListReplyBySenderResponse{} }
func (m *QueryListReplyBySenderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListReplyBySenderResponse) ProtoMessage()    {}
func (*QueryListReplyBySenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{15}
}
func (m *QueryListReplyBySenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListReplyBySenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListReplyBySenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListReplyBySenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListReplyBySenderResponse.Merge(m, src)
}
func (m *QueryListReplyBySenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListReplyBySenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListReplyBySenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListReplyBySenderResponse proto.InternalMessageInfo

func (m *QueryListReplyBySenderResponse) GetReply() []*Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

type QueryListReplyByReplierRequest struct {
	Replier string `protobuf:"bytes,1,opt,name=replier,proto3" json:"replier,omitempty"`
	Page    uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit   uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListReplyByReplierRequest) Reset()         { *m = QueryListReplyByReplierRequest{} }
func (m *QueryListReplyByReplierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListReplyByReplierRequest) ProtoMessage()    {}
func (*QueryListReplyByReplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{16}
}
func (m *QueryListReplyByReplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListReplyByReplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListReplyByReplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListReplyByReplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListReplyByReplierRequest.Merge(m, src)
}
func (m *QueryListReplyByReplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListReplyByReplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListReplyByReplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListReplyByReplierRequest proto.InternalMessageInfo

func (m *QueryListReplyByReplierRequest) GetReplier() string {
	if m != nil {
		return m.Replier
	}
	return ""
}

func (m *QueryListReplyByReplierRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryListReplyByReplierRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListReplyByReplierResponse struct {
	Reply []*Reply `protobuf:"bytes,1,rep,name=reply,proto3" json:"reply,omitempty"`
}

func (m *QueryListReplyByReplierResponse) Reset()         { *m = QueryListReplyByReplierResponse{} }
func (m *QueryListReplyByReplierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListReplyByReplierResponse) ProtoMessage()    {}
func (*QueryListReplyByReplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8710e4b779e5be, []int{17}
}
func (m *QueryListReplyByReplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListReplyByReplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListReplyByReplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListReplyByReplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListReplyByReplierResponse.Merge(m, src)
}
func (m *QueryListReplyByReplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListReplyByReplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListReplyByReplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListReplyByReplierResponse proto.InternalMessageInfo

func (m *QueryListReplyByReplierResponse) GetReply() []*Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ganymede.exchange.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ganymede.exchange.QueryParamsResponse")
	proto.RegisterType((*QueryGetAskRequest)(nil), "ganymede.exchange.QueryGetAskRequest")
	proto.RegisterType((*QueryGetAskResponse)(nil), "ganymede.exchange.QueryGetAskResponse")
	proto.RegisterType((*QueryAllAskRequest)(nil), "ganymede.exchange.QueryAllAskRequest")
	proto.RegisterType((*QueryAllAskResponse)(nil), "ganymede.exchange.QueryAllAskResponse")
	proto.RegisterType((*QueryGetReplyRequest)(nil), "ganymede.exchange.QueryGetReplyRequest")
	proto.RegisterType((*QueryGetReplyResponse)(nil), "ganymede.exchange.QueryGetReplyResponse")
	proto.RegisterType((*QueryAllReplyRequest)(nil), "ganymede.exchange.QueryAllReplyRequest")
	proto.RegisterType((*QueryAllReplyResponse)(nil), "ganymede.exchange.QueryAllReplyResponse")
	proto.RegisterType((*QueryListAskBySenderRequest)(nil), "ganymede.exchange.QueryListAskBySenderRequest")
	proto.RegisterType((*QueryListAskBySenderResponse)(nil), "ganymede.exchange.QueryListAskBySenderResponse")
	proto.RegisterType((*QueryListAskByReplierRequest)(nil), "ganymede.exchange.QueryListAskByReplierRequest")
	proto.RegisterType((*QueryListAskByReplierResponse)(nil), "ganymede.exchange.QueryListAskByReplierResponse")
	proto.RegisterType((*QueryListReplyBySenderRequest)(nil), "ganymede.exchange.QueryListReplyBySenderRequest")
	proto.RegisterType((*QueryListReplyBySenderResponse)(nil), "ganymede.exchange.QueryListReplyBySenderResponse")
	proto.RegisterType((*QueryListReplyByReplierRequest)(nil), "ganymede.exchange.QueryListReplyByReplierRequest")
	proto.RegisterType((*QueryListReplyByReplierResponse)(nil), "ganymede.exchange.QueryListReplyByReplierResponse")
}

func init() { proto.RegisterFile("ganymede/exchange/query.proto", fileDescriptor_8c8710e4b779e5be) }

var fileDescriptor_8c8710e4b779e5be = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0xf9, 0x05, 0xcc, 0x4a, 0xc0, 0x0e, 0x61, 0x15, 0xb2, 0xbb, 0x5e, 0x64, 0x75,
	0x93, 0xee, 0xc2, 0x7a, 0x48, 0x41, 0xe2, 0x88, 0x52, 0x09, 0x96, 0x55, 0x29, 0xb4, 0xae, 0x38,
	0x80, 0x10, 0xd1, 0xa4, 0x19, 0x19, 0x2b, 0x8e, 0xed, 0x66, 0x5c, 0xd4, 0x10, 0xe5, 0x02, 0x82,
	0x0b, 0x02, 0x21, 0x21, 0xf1, 0x1f, 0x21, 0x55, 0x48, 0x48, 0x15, 0x5c, 0x38, 0x21, 0xd4, 0xf2,
	0x37, 0x70, 0x46, 0x9e, 0x79, 0x26, 0x71, 0x6c, 0xd7, 0x4e, 0x55, 0x4e, 0xb1, 0x67, 0xde, 0x7b,
	0xdf, 0xcf, 0x7b, 0x6f, 0xfc, 0x46, 0xc1, 0x77, 0x2d, 0xe6, 0x4e, 0xc7, 0x7c, 0xc8, 0x29, 0x3f,
	0x39, 0xfc, 0x8c, 0xb9, 0x16, 0xa7, 0x47, 0xc7, 0x7c, 0x32, 0x35, 0xfc, 0x89, 0x17, 0x78, 0xe4,
	0x66, 0xb4, 0x6d, 0x44, 0xdb, 0xad, 0x86, 0xe5, 0x59, 0x9e, 0xdc, 0xa5, 0xe1, 0x93, 0x32, 0x6c,
	0xdd, 0xb1, 0x3c, 0xcf, 0x72, 0x38, 0x65, 0xbe, 0x4d, 0x99, 0xeb, 0x7a, 0x01, 0x0b, 0x6c, 0xcf,
	0x15, 0xb0, 0xfb, 0xf0, 0xd0, 0x13, 0x63, 0x4f, 0xd0, 0x01, 0x13, 0x10, 0x9f, 0x7e, 0xde, 0x1d,
	0xf0, 0x80, 0x75, 0xa9, 0xcf, 0x2c, 0xdb, 0x95, 0xc6, 0x60, 0xab, 0x25, 0x89, 0x7c, 0x36, 0x61,
	0xe3, 0x28, 0xd6, 0xed, 0xe4, 0x3e, 0x13, 0x23, 0xd8, 0x4c, 0x49, 0x67, 0xc2, 0x7d, 0x07, 0xd2,
	0xd1, 0x1b, 0x98, 0xec, 0x87, 0xea, 0x7b, 0x32, 0xa0, 0xc9, 0x8f, 0x8e, 0xb9, 0x08, 0xf4, 0xf7,
	0xf1, 0x0b, 0xb1, 0x55, 0xe1, 0x7b, 0xae, 0xe0, 0xe4, 0x4d, 0x5c, 0x57, 0xc2, 0x4d, 0xf4, 0x32,
	0xda, 0xbc, 0xb1, 0xf5, 0x92, 0x91, 0x28, 0x86, 0xa1, 0x5c, 0xb6, 0xab, 0xa7, 0x7f, 0xde, 0x2b,
	0x99, 0x60, 0xae, 0x6f, 0x80, 0xca, 0x63, 0x1e, 0xf4, 0xc4, 0x08, 0x54, 0xc8, 0xb3, 0xb8, 0x6c,
	0x0f, 0x65, 0xa8, 0xaa, 0x59, 0xb6, 0x87, 0xfa, 0xdb, 0xa0, 0x1a, 0x59, 0x81, 0xaa, 0x81, 0x2b,
	0x3d, 0x31, 0x02, 0xc9, 0x5b, 0x29, 0x92, 0x3d, 0x31, 0x02, 0xbd, 0xd0, 0x50, 0xff, 0x04, 0xc4,
	0x7a, 0x8e, 0xb3, 0x24, 0xf6, 0x0e, 0xc6, 0x8b, 0xc2, 0x42, 0xb0, 0xb6, 0xa1, 0xba, 0x60, 0x84,
	0x5d, 0x30, 0x54, 0x97, 0xa1, 0x0b, 0xc6, 0x1e, 0xb3, 0x38, 0xf8, 0x9a, 0x4b, 0x9e, 0xfa, 0xf7,
	0x08, 0x28, 0xa3, 0xf0, 0xab, 0x94, 0x95, 0x42, 0x94, 0xe4, 0x71, 0x8c, 0xa7, 0x2c, 0x79, 0x3a,
	0xb9, 0x3c, 0x4a, 0x2c, 0x06, 0xd4, 0xc6, 0x8d, 0xa8, 0x6a, 0x66, 0xd8, 0xd8, 0xac, 0xea, 0xee,
	0xe2, 0x17, 0x57, 0xec, 0x80, 0xfc, 0x0d, 0x5c, 0x93, 0x0b, 0x50, 0x94, 0x66, 0x0a, 0xbb, 0xdc,
	0x07, 0x7a, 0x65, 0xac, 0x7f, 0x0a, 0xb2, 0x3d, 0xc7, 0x89, 0xc9, 0x5e, 0x57, 0x9d, 0x7f, 0x42,
	0xc0, 0xbb, 0x10, 0x48, 0xf2, 0x56, 0x0a, 0xf3, 0x5e, 0x5f, 0xbd, 0xfb, 0xf8, 0xb6, 0xe4, 0x7a,
	0xcf, 0x16, 0xe1, 0x31, 0xdd, 0x9e, 0x1e, 0x70, 0x77, 0xc8, 0x27, 0x51, 0xfe, 0xb7, 0x70, 0x5d,
	0xc8, 0x05, 0x99, 0xfb, 0x33, 0x26, 0xbc, 0x11, 0x82, 0xab, 0x3e, 0xb3, 0xb8, 0x54, 0xae, 0x9a,
	0xf2, 0x99, 0x34, 0x70, 0xcd, 0xb1, 0xc7, 0x76, 0xd0, 0xac, 0xc8, 0x45, 0xf5, 0xa2, 0xbf, 0x8b,
	0xef, 0xa4, 0x0b, 0x40, 0xfe, 0x9b, 0xb8, 0xc2, 0xf2, 0x4e, 0x9a, 0x19, 0x9a, 0xe8, 0x83, 0xd5,
	0x48, 0x61, 0x29, 0xec, 0x05, 0x6b, 0x13, 0x3f, 0x35, 0x51, 0x2b, 0x00, 0x1b, 0xbd, 0xae, 0x41,
	0xfb, 0x04, 0xdf, 0xcd, 0xd0, 0x58, 0x1b, 0x97, 0x2d, 0x85, 0x52, 0x1d, 0xbc, 0xf6, 0xda, 0xee,
	0x61, 0x2d, 0x4b, 0xe2, 0xbf, 0xef, 0xb8, 0x36, 0x29, 0x72, 0xba, 0x4c, 0x65, 0xa6, 0x0f, 0x93,
	0x11, 0xff, 0x87, 0x2a, 0xef, 0xe3, 0x7b, 0x99, 0x2a, 0x57, 0x03, 0xdf, 0xfa, 0xe7, 0x06, 0xae,
	0xc9, 0x98, 0xe4, 0x1b, 0x84, 0xeb, 0x6a, 0x6c, 0x93, 0xfb, 0x29, 0x5e, 0xc9, 0xfb, 0xa1, 0xd5,
	0xce, 0x33, 0x53, 0x4c, 0xfa, 0xa3, 0x2f, 0x7f, 0xff, 0xfb, 0xc7, 0x72, 0x87, 0xdc, 0xa7, 0xea,
	0x43, 0x7b, 0x14, 0x70, 0x11, 0xd0, 0xac, 0xeb, 0x8c, 0x7c, 0x8d, 0xe4, 0x10, 0xcd, 0xa6, 0x88,
	0xdd, 0x1f, 0xd9, 0x14, 0xf1, 0x0b, 0x44, 0xa7, 0x92, 0xe2, 0x01, 0xe9, 0xe4, 0x50, 0x30, 0x31,
	0xa2, 0x33, 0x7b, 0x38, 0x27, 0x5f, 0x21, 0x5c, 0xef, 0x89, 0x51, 0xcf, 0x71, 0xb2, 0x51, 0x62,
	0xb7, 0x4b, 0x36, 0x4a, 0xfc, 0x96, 0xd0, 0x1f, 0x4a, 0x94, 0x0d, 0xa2, 0xe7, 0xa3, 0x90, 0xef,
	0x10, 0x0c, 0x3a, 0xd2, 0xb9, 0x24, 0xd1, 0xe5, 0xe1, 0xdb, 0xda, 0xcc, 0x37, 0x04, 0x90, 0xae,
	0x04, 0x79, 0x85, 0x3c, 0xc8, 0x01, 0x91, 0x67, 0x45, 0x55, 0xe5, 0x5b, 0x84, 0x9f, 0x96, 0x41,
	0xc2, 0xba, 0x74, 0x2e, 0x49, 0xb8, 0x18, 0xd2, 0xea, 0x5c, 0xd7, 0x5f, 0x95, 0x48, 0x6d, 0xb2,
	0x51, 0x04, 0x89, 0xfc, 0x8c, 0xf0, 0x73, 0x2b, 0x13, 0x92, 0x18, 0x59, 0x5a, 0xe9, 0xb3, 0xba,
	0x45, 0x0b, 0xdb, 0x03, 0xe2, 0xbe, 0x44, 0xdc, 0x21, 0x4f, 0x72, 0x10, 0x1d, 0x5b, 0x04, 0x7d,
	0x26, 0x46, 0xfd, 0xc1, 0xb4, 0xaf, 0x66, 0x14, 0x9d, 0xa9, 0xdf, 0x39, 0x9d, 0x85, 0x9f, 0xf9,
	0x9c, 0xce, 0xe4, 0x87, 0x3d, 0x27, 0xbf, 0x20, 0xfc, 0xfc, 0xea, 0xec, 0x24, 0xf9, 0x60, 0xf1,
	0x19, 0xd3, 0x7a, 0xad, 0xb8, 0x03, 0xa4, 0x72, 0x20, 0x53, 0xd9, 0x25, 0x3b, 0x6b, 0xa4, 0x02,
	0x73, 0x8b, 0xce, 0xe0, 0x21, 0x91, 0xcc, 0xaf, 0x08, 0xdf, 0x4c, 0x8c, 0x56, 0x72, 0x29, 0x5c,
	0xda, 0xa0, 0x6f, 0x75, 0xd7, 0xf0, 0xb8, 0x4a, 0x3e, 0xf2, 0x08, 0x15, 0x68, 0xce, 0x6f, 0x08,
	0x93, 0xe4, 0xc8, 0x25, 0x45, 0xf0, 0x56, 0x1a, 0xb4, 0xb5, 0x8e, 0x0b, 0xa4, 0xf4, 0xa1, 0x4c,
	0xe9, 0x03, 0xb2, 0xbb, 0x56, 0x4a, 0x79, 0x4d, 0xda, 0xfe, 0xe8, 0xf4, 0x5c, 0x43, 0x67, 0xe7,
	0x1a, 0xfa, 0xeb, 0x5c, 0x43, 0x3f, 0x5c, 0x68, 0xa5, 0xb3, 0x0b, 0xad, 0xf4, 0xc7, 0x85, 0x56,
	0xfa, 0xf8, 0x2d, 0xcb, 0x0e, 0x1c, 0x36, 0x30, 0xa6, 0xce, 0x17, 0x3e, 0x9b, 0x1a, 0x87, 0xde,
	0x98, 0x5a, 0xc7, 0xcc, 0x0d, 0x98, 0x97, 0x4e, 0x70, 0xb2, 0x60, 0x08, 0xa6, 0x3e, 0x17, 0x83,
	0xba, 0xfc, 0x53, 0xf1, 0xfa, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xf2, 0x7c, 0x22, 0x44,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Ask items.
	Ask(ctx context.Context, in *QueryGetAskRequest, opts ...grpc.CallOption) (*QueryGetAskResponse, error)
	AskAll(ctx context.Context, in *QueryAllAskRequest, opts ...grpc.CallOption) (*QueryAllAskResponse, error)
	// Queries a list of Reply items.
	Reply(ctx context.Context, in *QueryGetReplyRequest, opts ...grpc.CallOption) (*QueryGetReplyResponse, error)
	ReplyAll(ctx context.Context, in *QueryAllReplyRequest, opts ...grpc.CallOption) (*QueryAllReplyResponse, error)
	// Queries a list of ListAskBySender items.
	ListAskBySender(ctx context.Context, in *QueryListAskBySenderRequest, opts ...grpc.CallOption) (*QueryListAskBySenderResponse, error)
	// Queries a list of ListAskByReplier items.
	ListAskByReplier(ctx context.Context, in *QueryListAskByReplierRequest, opts ...grpc.CallOption) (*QueryListAskByReplierResponse, error)
	// Queries a list of ListReplyBySender items.
	ListReplyBySender(ctx context.Context, in *QueryListReplyBySenderRequest, opts ...grpc.CallOption) (*QueryListReplyBySenderResponse, error)
	// Queries a list of ListReplyByReplier items.
	ListReplyByReplier(ctx context.Context, in *QueryListReplyByReplierRequest, opts ...grpc.CallOption) (*QueryListReplyByReplierResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ask(ctx context.Context, in *QueryGetAskRequest, opts ...grpc.CallOption) (*QueryGetAskResponse, error) {
	out := new(QueryGetAskResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/Ask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AskAll(ctx context.Context, in *QueryAllAskRequest, opts ...grpc.CallOption) (*QueryAllAskResponse, error) {
	out := new(QueryAllAskResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/AskAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reply(ctx context.Context, in *QueryGetReplyRequest, opts ...grpc.CallOption) (*QueryGetReplyResponse, error) {
	out := new(QueryGetReplyResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReplyAll(ctx context.Context, in *QueryAllReplyRequest, opts ...grpc.CallOption) (*QueryAllReplyResponse, error) {
	out := new(QueryAllReplyResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/ReplyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAskBySender(ctx context.Context, in *QueryListAskBySenderRequest, opts ...grpc.CallOption) (*QueryListAskBySenderResponse, error) {
	out := new(QueryListAskBySenderResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/ListAskBySender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAskByReplier(ctx context.Context, in *QueryListAskByReplierRequest, opts ...grpc.CallOption) (*QueryListAskByReplierResponse, error) {
	out := new(QueryListAskByReplierResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/ListAskByReplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListReplyBySender(ctx context.Context, in *QueryListReplyBySenderRequest, opts ...grpc.CallOption) (*QueryListReplyBySenderResponse, error) {
	out := new(QueryListReplyBySenderResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/ListReplyBySender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListReplyByReplier(ctx context.Context, in *QueryListReplyByReplierRequest, opts ...grpc.CallOption) (*QueryListReplyByReplierResponse, error) {
	out := new(QueryListReplyByReplierResponse)
	err := c.cc.Invoke(ctx, "/ganymede.exchange.Query/ListReplyByReplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Ask items.
	Ask(context.Context, *QueryGetAskRequest) (*QueryGetAskResponse, error)
	AskAll(context.Context, *QueryAllAskRequest) (*QueryAllAskResponse, error)
	// Queries a list of Reply items.
	Reply(context.Context, *QueryGetReplyRequest) (*QueryGetReplyResponse, error)
	ReplyAll(context.Context, *QueryAllReplyRequest) (*QueryAllReplyResponse, error)
	// Queries a list of ListAskBySender items.
	ListAskBySender(context.Context, *QueryListAskBySenderRequest) (*QueryListAskBySenderResponse, error)
	// Queries a list of ListAskByReplier items.
	ListAskByReplier(context.Context, *QueryListAskByReplierRequest) (*QueryListAskByReplierResponse, error)
	// Queries a list of ListReplyBySender items.
	ListReplyBySender(context.Context, *QueryListReplyBySenderRequest) (*QueryListReplyBySenderResponse, error)
	// Queries a list of ListReplyByReplier items.
	ListReplyByReplier(context.Context, *QueryListReplyByReplierRequest) (*QueryListReplyByReplierResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Ask(ctx context.Context, req *QueryGetAskRequest) (*QueryGetAskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (*UnimplementedQueryServer) AskAll(ctx context.Context, req *QueryAllAskRequest) (*QueryAllAskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskAll not implemented")
}
func (*UnimplementedQueryServer) Reply(ctx context.Context, req *QueryGetReplyRequest) (*QueryGetReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (*UnimplementedQueryServer) ReplyAll(ctx context.Context, req *QueryAllReplyRequest) (*QueryAllReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyAll not implemented")
}
func (*UnimplementedQueryServer) ListAskBySender(ctx context.Context, req *QueryListAskBySenderRequest) (*QueryListAskBySenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAskBySender not implemented")
}
func (*UnimplementedQueryServer) ListAskByReplier(ctx context.Context, req *QueryListAskByReplierRequest) (*QueryListAskByReplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAskByReplier not implemented")
}
func (*UnimplementedQueryServer) ListReplyBySender(ctx context.Context, req *QueryListReplyBySenderRequest) (*QueryListReplyBySenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplyBySender not implemented")
}
func (*UnimplementedQueryServer) ListReplyByReplier(ctx context.Context, req *QueryListReplyByReplierRequest) (*QueryListReplyByReplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplyByReplier not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/Ask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ask(ctx, req.(*QueryGetAskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AskAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AskAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/AskAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AskAll(ctx, req.(*QueryAllAskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reply(ctx, req.(*QueryGetReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReplyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReplyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/ReplyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReplyAll(ctx, req.(*QueryAllReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAskBySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAskBySenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAskBySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/ListAskBySender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAskBySender(ctx, req.(*QueryListAskBySenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAskByReplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAskByReplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAskByReplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/ListAskByReplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAskByReplier(ctx, req.(*QueryListAskByReplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListReplyBySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListReplyBySenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListReplyBySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/ListReplyBySender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListReplyBySender(ctx, req.(*QueryListReplyBySenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListReplyByReplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListReplyByReplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListReplyByReplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ganymede.exchange.Query/ListReplyByReplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListReplyByReplier(ctx, req.(*QueryListReplyByReplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ganymede.exchange.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Ask",
			Handler:    _Query_Ask_Handler,
		},
		{
			MethodName: "AskAll",
			Handler:    _Query_AskAll_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _Query_Reply_Handler,
		},
		{
			MethodName: "ReplyAll",
			Handler:    _Query_ReplyAll_Handler,
		},
		{
			MethodName: "ListAskBySender",
			Handler:    _Query_ListAskBySender_Handler,
		},
		{
			MethodName: "ListAskByReplier",
			Handler:    _Query_ListAskByReplier_Handler,
		},
		{
			MethodName: "ListReplyBySender",
			Handler:    _Query_ListReplyBySender_Handler,
		},
		{
			MethodName: "ListReplyByReplier",
			Handler:    _Query_ListReplyByReplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ganymede/exchange/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Ask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ask) > 0 {
		for iNdEx := len(m.Ask) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ask[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reply) > 0 {
		for iNdEx := len(m.Reply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAskBySenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAskBySenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAskBySenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAskBySenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAskBySenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAskBySenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ask) > 0 {
		for iNdEx := len(m.Ask) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ask[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAskByReplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAskByReplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAskByReplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Replier) > 0 {
		i -= len(m.Replier)
		copy(dAtA[i:], m.Replier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Replier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAskByReplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAskByReplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAskByReplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ask) > 0 {
		for iNdEx := len(m.Ask) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ask[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListReplyBySenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListReplyBySenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListReplyBySenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListReplyBySenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListReplyBySenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListReplyBySenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for iNdEx := len(m.Reply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListReplyByReplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListReplyByReplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListReplyByReplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Replier) > 0 {
		i -= len(m.Replier)
		copy(dAtA[i:], m.Replier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Replier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListReplyByReplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListReplyByReplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListReplyByReplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for iNdEx := len(m.Reply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ask.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ask) > 0 {
		for _, e := range m.Ask {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetReplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, e := range m.Reply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAskBySenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListAskBySenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ask) > 0 {
		for _, e := range m.Ask {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListAskByReplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Replier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListAskByReplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ask) > 0 {
		for _, e := range m.Ask {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListReplyBySenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListReplyBySenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, e := range m.Reply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListReplyByReplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Replier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListReplyByReplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reply) > 0 {
		for _, e := range m.Reply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ask = append(m.Ask, Ask{})
			if err := m.Ask[len(m.Ask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, Reply{})
			if err := m.Reply[len(m.Reply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAskBySenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAskBySenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAskBySenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAskBySenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAskBySenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAskBySenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ask = append(m.Ask, &Ask{})
			if err := m.Ask[len(m.Ask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAskByReplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAskByReplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAskByReplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAskByReplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAskByReplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAskByReplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ask = append(m.Ask, &Ask{})
			if err := m.Ask[len(m.Ask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListReplyBySenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListReplyBySenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListReplyBySenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListReplyBySenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListReplyBySenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListReplyBySenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, &Reply{})
			if err := m.Reply[len(m.Reply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListReplyByReplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListReplyByReplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListReplyByReplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListReplyByReplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListReplyByReplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListReplyByReplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, &Reply{})
			if err := m.Reply[len(m.Reply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
