// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ganymede/ganymede/users.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Users struct {
	ChainAddr  string `protobuf:"bytes,1,opt,name=chainAddr,proto3" json:"chainAddr,omitempty"`
	KeyName    string `protobuf:"bytes,2,opt,name=keyName,proto3" json:"keyName,omitempty"`
	UserType   string `protobuf:"bytes,3,opt,name=userType,proto3" json:"userType,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Address    string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Phone      string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	AccountNo  string `protobuf:"bytes,7,opt,name=accountNo,proto3" json:"accountNo,omitempty"`
	Ref        string `protobuf:"bytes,8,opt,name=ref,proto3" json:"ref,omitempty"`
	RegDate    string `protobuf:"bytes,9,opt,name=regDate,proto3" json:"regDate,omitempty"`
	Status     string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	LastDate   string `protobuf:"bytes,11,opt,name=lastDate,proto3" json:"lastDate,omitempty"`
	LinkStatus string `protobuf:"bytes,12,opt,name=linkStatus,proto3" json:"linkStatus,omitempty"`
	Creator    string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2a38812b98b189, []int{0}
}
func (m *Users) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Users.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return m.Size()
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetChainAddr() string {
	if m != nil {
		return m.ChainAddr
	}
	return ""
}

func (m *Users) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *Users) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

func (m *Users) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Users) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Users) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Users) GetAccountNo() string {
	if m != nil {
		return m.AccountNo
	}
	return ""
}

func (m *Users) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Users) GetRegDate() string {
	if m != nil {
		return m.RegDate
	}
	return ""
}

func (m *Users) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Users) GetLastDate() string {
	if m != nil {
		return m.LastDate
	}
	return ""
}

func (m *Users) GetLinkStatus() string {
	if m != nil {
		return m.LinkStatus
	}
	return ""
}

func (m *Users) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Users)(nil), "ganymede.ganymede.Users")
}

func init() { proto.RegisterFile("ganymede/ganymede/users.proto", fileDescriptor_ca2a38812b98b189) }

var fileDescriptor_ca2a38812b98b189 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0x9b, 0x7e, 0xd7, 0xff, 0x3f, 0x12, 0x58, 0x08, 0x59, 0x08, 0x2c, 0xc4, 0xc4, 0x42,
	0x3a, 0xf0, 0x00, 0x08, 0xc4, 0xdc, 0x81, 0x8f, 0x01, 0xb6, 0xdb, 0xe4, 0x92, 0x56, 0x4d, 0xec,
	0xc8, 0x76, 0x24, 0xcc, 0x53, 0xf0, 0x58, 0x8c, 0xdd, 0x60, 0x44, 0xed, 0x8b, 0x20, 0xdb, 0x49,
	0xc3, 0x76, 0x7e, 0xe7, 0xf8, 0x9e, 0x6b, 0xcb, 0xe4, 0x34, 0x03, 0x61, 0x0b, 0x4c, 0x71, 0xba,
	0x13, 0x95, 0x46, 0xa5, 0xe3, 0x52, 0x49, 0x23, 0xe9, 0x41, 0xe3, 0xc6, 0x8d, 0x38, 0xff, 0xea,
	0x92, 0xc1, 0x93, 0x3b, 0x42, 0x4f, 0xc8, 0x24, 0x59, 0xc0, 0x52, 0xdc, 0xa4, 0xa9, 0x62, 0xd1,
	0x59, 0x74, 0x31, 0xb9, 0x6f, 0x0d, 0xca, 0xc8, 0x68, 0x85, 0x76, 0x06, 0x05, 0xb2, 0xae, 0xcf,
	0x1a, 0xa4, 0xc7, 0x64, 0xec, 0x76, 0x3c, 0xda, 0x12, 0x59, 0xcf, 0x47, 0x3b, 0xa6, 0x94, 0xf4,
	0x85, 0x1b, 0xe9, 0x7b, 0xdf, 0x6b, 0xd7, 0x04, 0x69, 0xaa, 0x50, 0x6b, 0x36, 0x08, 0x4d, 0x35,
	0xd2, 0x43, 0x32, 0x28, 0x17, 0x52, 0x20, 0x1b, 0x7a, 0x3f, 0x80, 0xbb, 0x17, 0x24, 0x89, 0xac,
	0x84, 0x99, 0x49, 0x36, 0x0a, 0xf7, 0xda, 0x19, 0x74, 0x9f, 0xf4, 0x14, 0xbe, 0xb2, 0xb1, 0xf7,
	0x9d, 0x74, 0xfd, 0x0a, 0xb3, 0x3b, 0x30, 0xc8, 0x26, 0xa1, 0xbf, 0x46, 0x7a, 0x44, 0x86, 0xda,
	0x80, 0xa9, 0x34, 0x23, 0x3e, 0xa8, 0xc9, 0xbd, 0x20, 0x07, 0x6d, 0xfc, 0xc8, 0xbf, 0xf0, 0x82,
	0x86, 0x29, 0x27, 0x24, 0x5f, 0x8a, 0xd5, 0x43, 0x98, 0xfb, 0xef, 0xd3, 0x3f, 0x8e, 0xdb, 0x96,
	0x28, 0x04, 0x23, 0x15, 0xdb, 0x0b, 0xdb, 0x6a, 0xbc, 0x7d, 0xfe, 0xdc, 0xf0, 0x68, 0xbd, 0xe1,
	0xd1, 0xcf, 0x86, 0x47, 0x1f, 0x5b, 0xde, 0x59, 0x6f, 0x79, 0xe7, 0x7b, 0xcb, 0x3b, 0x2f, 0xd7,
	0xd9, 0xd2, 0xe4, 0x30, 0x8f, 0x6d, 0xfe, 0x5e, 0x82, 0x8d, 0x13, 0x59, 0x4c, 0xb3, 0x0a, 0x84,
	0x01, 0x39, 0x4d, 0xa4, 0x2e, 0xa4, 0xbe, 0x34, 0xa8, 0x4d, 0xfb, 0x85, 0x6f, 0xad, 0x34, 0xb6,
	0x44, 0x3d, 0x1f, 0xfa, 0xef, 0xbc, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x42, 0xed, 0xf9,
	0xef, 0x01, 0x00, 0x00,
}

func (m *Users) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Users) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Users) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LinkStatus) > 0 {
		i -= len(m.LinkStatus)
		copy(dAtA[i:], m.LinkStatus)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.LinkStatus)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LastDate) > 0 {
		i -= len(m.LastDate)
		copy(dAtA[i:], m.LastDate)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.LastDate)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RegDate) > 0 {
		i -= len(m.RegDate)
		copy(dAtA[i:], m.RegDate)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.RegDate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Ref) > 0 {
		i -= len(m.Ref)
		copy(dAtA[i:], m.Ref)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Ref)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccountNo) > 0 {
		i -= len(m.AccountNo)
		copy(dAtA[i:], m.AccountNo)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.AccountNo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserType) > 0 {
		i -= len(m.UserType)
		copy(dAtA[i:], m.UserType)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyName) > 0 {
		i -= len(m.KeyName)
		copy(dAtA[i:], m.KeyName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.KeyName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainAddr) > 0 {
		i -= len(m.ChainAddr)
		copy(dAtA[i:], m.ChainAddr)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ChainAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Users) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainAddr)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.KeyName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.UserType)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.AccountNo)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.RegDate)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.LastDate)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.LinkStatus)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func sovUsers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Users) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Users: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Users: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsers = fmt.Errorf("proto: unexpected end of group")
)
